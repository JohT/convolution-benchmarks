name: Continuous Integration

on:
  push:
    branches:
      - main
    # Ignore changes in documentation and benchmark charts.
    # Need to contain git add parameters below.
    paths-ignore: 
      - '**/LICENSE'
      - '**.md'
      - '**.txt'
      - '**.bat'
      - '**.sh'
      - '**.svg'
      - '**.png'
      - '**.code-workspace'
      - '**/benchmark-report.json'
      - '**/benchmark-report.xml'
      - 'renovate.json'
  pull_request:
    branches:
      - main
    # Ignore changes in documentation and benchmark charts.
    paths-ignore: 
      - '**/LICENSE'
      - '**.md'
      - '**.txt'
      - '**.bat'
      - '**.sh'
      - '**.svg'
      - '**.png'
      - '**.code-workspace'
      - '**/benchmark-report.json'
      - '**/benchmark-report.xml'
      - 'renovate.json'

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  BUILD_TYPE: Release
  BUILD_DIR: build
  GNU_COMPILER_VERSION: 13
  CHART_DIR: chart
  CHART_ENVIRONMENT_FILE: BenchmarkChart.env
  CI_COMMIT_MESSAGE: (CI) Update chart
  CI_COMMIT_AUTHOR: ${{ github.event.repository.name }} Continuous Integration

jobs:
  build_and_test:
    name: ${{ matrix.artifact }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
        - os: ubuntu-latest
          artifact: Linux
          enforce-sse2: FALSE
          enforce-avx: FALSE
          enforce-avx2: FALSE
        - os: ubuntu-latest
          artifact: Linux SSE2
          enforce-sse2: TRUE
          enforce-avx: FALSE
          enforce-avx2: FALSE
        - os: ubuntu-latest
          artifact: Linux AVX
          enforce-sse2: FALSE
          enforce-avx: TRUE
          enforce-avx2: FALSE
        - os: ubuntu-latest
          artifact: Linux AVX2
          enforce-sse2: FALSE
          enforce-avx: FALSE
          enforce-avx2: TRUE
        - os: windows-latest
          artifact: Windows
          enforce-sse2: FALSE
          enforce-avx: FALSE
          enforce-avx2: FALSE
        - os: windows-latest
          artifact: Windows AVX2
          enforce-sse2: FALSE
          enforce-avx: FALSE
          enforce-avx2: TRUE
        - os: windows-latest
          artifact: Windows AVX
          enforce-sse2: FALSE
          enforce-avx: TRUE
          enforce-avx2: FALSE
        - os: macos-13
          artifact: MacOS
          enforce-sse2: FALSE
          enforce-avx: FALSE
          enforce-avx2: FALSE
        - os: macos-latest
          artifact: MacOS M1
          enforce-sse2: FALSE
          enforce-avx: FALSE
          enforce-avx2: FALSE       

    steps:
    
    # Install additional packages and tools for the build
    - name: (Install) Linux Dependencies and select g++ ${{ env.GNU_COMPILER_VERSION }}
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update && sudo apt-get install g++-${{ env.GNU_COMPILER_VERSION }} gcc-${{ env.GNU_COMPILER_VERSION }} build-essential libcairo2-dev libpango1.0-dev librsvg2-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GNU_COMPILER_VERSION }} ${{ env.GNU_COMPILER_VERSION }}
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ env.GNU_COMPILER_VERSION }} ${{ env.GNU_COMPILER_VERSION }}
        
    - name: (Install) CMake and Ninja 
      uses: lukka/get-cmake@latest

    # Checkout the code from GIT using a dedicated personal access token
    - name: (GIT) Checkout code
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.WORKFLOW_GIT_ACCESS_TOKEN }}

    # Build and test the C++ Project using CMake
    - name: (CMake) Ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ matrix.artifact }}-${{ env.BUILD_TYPE }}
    - name: (CMake) Configure, Enforce SSE=${{ matrix.enforce-sse2 }}, AVX=${{ matrix.enforce-avx }}, AVX2=${{ matrix.enforce-avx2 }}
      run: >
        cmake -B ${{ env.BUILD_DIR }}
        -G Ninja
        -S .
        -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}}
        -DCMAKE_C_COMPILER_LAUNCHER=ccache
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -DENFORCE_VECTOR_EXTENSION_SSE2:BOOL=${{ matrix.enforce-sse2 }}
        -DENFORCE_VECTOR_EXTENSION_AVX:BOOL=${{ matrix.enforce-avx }}
        -DENFORCE_VECTOR_EXTENSION_AVX2:BOOL=${{ matrix.enforce-avx2 }}
    - name: (CMake) Build
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }}
    - name: (CMake) Test
      working-directory: ${{ env.BUILD_DIR }}
      run: ctest --test-dir test
      
    # Run the benchmark tests using Catch2
    - name: (Catch2) Run Benchmarks (POSIX)
      if: matrix.os != 'windows-latest'
      run: ./script/run-benchmarks.sh
    - name: (Catch2) Run Benchmarks (Windows)
      if: matrix.os == 'windows-latest'
      run: .\script\run-benchmarks.bat

    # Generate the charts using Node.js
    - name: (Node.js) Setup
      uses: actions/setup-node@v4
      with:
        node-version: 22
        cache: 'npm'
        cache-dependency-path: ${{ env.CHART_DIR }}/package-lock.json
    - name: (Node.js) Install Packages
      working-directory: ${{ env.CHART_DIR }}
      run: npm ci
    - name: (Node.js) Build Charts
      working-directory: ${{ env.CHART_DIR }}
      run: npm run build

    # Package the results into a ZIP and upload it as build artifact
    - name: (Package) Import environment file ${{ env.CHART_ENVIRONMENT_FILE }}
      uses: cardinalby/export-env-action@v1
      with:
        envFile: '${{ env.BUILD_DIR }}/${{ env.CHART_ENVIRONMENT_FILE }}'      
    - name: (Package) Zip
      working-directory: ${{ env.CHART_DIR }}
      run: cmake -E tar cfv ${{ env.PROJECT_NAME }}-charts-${{ env.BENCHMARK_CHART_GROUP }}.zip --format=zip ${{ env.BENCHMARK_CHART_GROUP }}
    - name: (Package) Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        path: ${{ env.CHART_DIR }}/${{ env.PROJECT_NAME }}-charts-${{ env.BENCHMARK_CHART_GROUP }}.zip
        name: ${{ env.PROJECT_NAME }}-charts-${{ env.BENCHMARK_CHART_GROUP }}-artifact-${{ matrix.artifact }}
        retention-days: 7

    # Commit and push benchmark reports on merge into "main" branch
    - name: Display environment variable "github.event_name"
      run: echo "github.event_name=${{ github.event_name }}"
    - name: (GIT) Commit benchmark reports
      shell: bash
      working-directory: ${{ env.CHART_DIR }}
      # Only run when a pull request gets merged or a commit is pushed to the main branch
      # git add parameters need to directly or indirectly match paths-ignore parameters above
      if: github.event_name == 'push'
      run: |
        set -x # Show the commands being executed
        git config --global user.name '${{ env.CI_COMMIT_AUTHOR }}'
        git config --global user.email "7671054+JohT@users.noreply.github.com"
        git fetch origin
        git status
        git add ${{ env.BENCHMARK_CHART_GROUP }}
        git commit --message "${{ env.CI_COMMIT_MESSAGE }} ${{ env.BENCHMARK_CHART_GROUP }}"
        git status
        git rebase --strategy-option=theirs origin/main --verbose # Resolve conflicts by taking the current branch's changes
        GIT_EDITOR=true git rebase --continue || true # Continue the rebase or ignore if it fails
        git add ${{ env.BENCHMARK_CHART_GROUP }} # Add the files again after the rebase
        git status
        git commit --amend --no-edit # Amend the commit to include the changes from the rebase
        git status
        git push --verbose